"""
Configuraci√≥n global de FacturIA 2.0
Carga variables de entorno y configuraciones del sistema
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# === PATHS DEL PROYECTO ===
BASE_DIR = Path(__file__).parent.parent
DATA_DIR = BASE_DIR / "data"
LOGS_DIR = BASE_DIR / "logs"

INGRESOS_DIR = DATA_DIR / "ingresos"
EGRESOS_DIR = DATA_DIR / "egresos"
PROCESADOS_DIR = DATA_DIR / "procesados"

# === CREDENCIALES ===
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GMAIL_EMAIL = os.getenv("GMAIL_EMAIL")
GMAIL_PASSWORD = os.getenv("GMAIL_PASSWORD")

# === BASE DE DATOS ===
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///facturia2.db")

# === CONFIGURACI√ìN DEL SISTEMA ===
EMAIL_CHECK_INTERVAL = int(os.getenv("EMAIL_CHECK_INTERVAL", "5"))  # minutos
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# === CATEGOR√çAS PREDEFINIDAS ===
CATEGORIAS_INGRESOS = [
    "sueldo",
    "cobro_servicios",
    "deposito",
    "transferencia_recibida",
    "ventas",
    "otro_ingreso"
]

CATEGORIAS_EGRESOS = [
    "factura_servicios",
    "supermercado",
    "impuestos",
    "alquiler",
    "combustible",
    "salud",
    "entretenimiento",
    "otro_egreso"
]

# === PROMPT PARA GEMINI ===
GEMINI_PROMPT_TEMPLATE = """
Eres un experto en an√°lisis de documentos financieros. Tu tarea es extraer TODOS los datos relevantes de esta imagen/documento y responder en formato JSON estructurado.

‚ö†Ô∏è INSTRUCCIONES CR√çTICAS:
1. Responde SOLO con el objeto JSON, sin texto adicional antes o despu√©s
2. NO uses bloques de c√≥digo markdown (```json)
3. Usa EXACTAMENTE las categor√≠as listadas abajo (sin variaciones ni sin√≥nimos)
4. Si tienes dudas entre dos categor√≠as, elige la m√°s espec√≠fica

üìã FORMATO DE RESPUESTA REQUERIDO:

{{
  "tipo": "ingreso" o "egreso",
  "categoria": "exactamente una de las categor√≠as v√°lidas listadas abajo",
  "fecha": "YYYY-MM-DD",
  "monto": 1500.50,
  "emisor_receptor": "Nombre exacto de la empresa o persona",
  "descripcion": "Descripci√≥n clara y concisa del concepto",
  "numero_comprobante": "001-00123456",
  "persona": "Nombre de la persona asociada (si est√° visible)"
}}

‚úÖ CATEGOR√çAS DE INGRESOS V√ÅLIDAS (elige UNA exactamente como est√° escrita):
- sueldo ‚Üí Pago de empleador, salario mensual, aguinaldo
- cobro_servicios ‚Üí Pago por servicios profesionales prestados
- deposito ‚Üí Dep√≥sito bancario, transferencia entrante
- transferencia_recibida ‚Üí Transferencia de terceros
- ventas ‚Üí Ingresos por venta de productos
- otro_ingreso ‚Üí Cualquier otro tipo de ingreso

‚úÖ CATEGOR√çAS DE EGRESOS V√ÅLIDAS (elige UNA exactamente como est√° escrita):
- factura_servicios ‚Üí Luz, agua, gas, internet, tel√©fono, cable, streaming
- supermercado ‚Üí Compras de alimentos y productos del hogar
- impuestos ‚Üí ABL, Ganancias, IIBB, patentes, tasas municipales
- alquiler ‚Üí Pago de alquiler de vivienda o local
- combustible ‚Üí Nafta, gasoil, carga de combustible
- salud ‚Üí M√©dico, farmacia, obra social, prepaga, estudios
- entretenimiento ‚Üí Cine, restaurantes, delivery, ocio, suscripciones
- otro_egreso ‚Üí Cualquier otro tipo de egreso

üîç EJEMPLOS DE CLASIFICACI√ìN CORRECTA:

Ejemplo 1 - Factura de luz:
{{
  "tipo": "egreso",
  "categoria": "factura_servicios",
  "fecha": "2025-10-15",
  "monto": 15750.50,
  "emisor_receptor": "EDENOR",
  "descripcion": "Factura de energ√≠a el√©ctrica per√≠odo 09/2025",
  "numero_comprobante": "0001-00045678",
  "persona": null
}}

Ejemplo 2 - Recibo de sueldo:
{{
  "tipo": "ingreso",
  "categoria": "sueldo",
  "fecha": "2025-10-01",
  "monto": 500000.00,
  "emisor_receptor": "Empresa XYZ S.A.",
  "descripcion": "Sueldo mensual octubre 2025",
  "numero_comprobante": "REC-2025-10-001",
  "persona": "Juan P√©rez"
}}

Ejemplo 3 - Compra supermercado:
{{
  "tipo": "egreso",
  "categoria": "supermercado",
  "fecha": "2025-10-20",
  "monto": 45680.25,
  "emisor_receptor": "Carrefour",
  "descripcion": "Compra semanal alimentos y limpieza",
  "numero_comprobante": "T-2025-8745",
  "persona": null
}}

‚ö†Ô∏è REGLAS ESTRICTAS DE VALIDACI√ìN:
- "tipo" debe ser EXACTAMENTE "ingreso" o "egreso" (en min√∫sculas)
- "categoria" debe ser EXACTAMENTE una de las listadas (sin espacios extras, sin may√∫sculas)
- "monto" debe ser un N√öMERO positivo sin s√≠mbolos ($, AR$, etc.)
- "fecha" debe estar en formato YYYY-MM-DD (a√±o-mes-d√≠a con guiones)
- Si NO puedes determinar un campo con certeza, usa null (sin comillas)
- "persona" es opcional, √∫salo si identificas a qui√©n pertenece la transacci√≥n

üö´ ERRORES COMUNES A EVITAR:
- ‚ùå "factura de servicios" ‚Üí ‚úÖ "factura_servicios"
- ‚ùå "Supermercado" ‚Üí ‚úÖ "supermercado"
- ‚ùå "$1500.50" ‚Üí ‚úÖ 1500.50
- ‚ùå "15/10/2025" ‚Üí ‚úÖ "2025-10-15"
- ‚ùå Agregar texto explicativo fuera del JSON ‚Üí ‚úÖ Solo el JSON

üéØ AHORA ANALIZA EL DOCUMENTO Y RESPONDE CON EL JSON:
"""

# === VALIDACI√ìN ===
def validar_configuracion():
    """Valida que las configuraciones necesarias est√©n presentes"""
    errores = []

    if not GOOGLE_API_KEY:
        errores.append("‚ùå GOOGLE_API_KEY no configurada en .env")

    if not GMAIL_EMAIL:
        errores.append("‚ùå GMAIL_EMAIL no configurado en .env")

    if not GMAIL_PASSWORD:
        errores.append("‚ùå GMAIL_PASSWORD no configurado en .env")

    if errores:
        print("\nüö® ERRORES DE CONFIGURACI√ìN:")
        for error in errores:
            print(f"   {error}")
        print("\nüí° Soluci√≥n:")
        print("   1. Copi√° .env.example como .env")
        print("   2. Complet√° las variables necesarias")
        return False

    print("‚úÖ Configuraci√≥n validada correctamente")
    return True

if __name__ == "__main__":
    validar_configuracion()
